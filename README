William Boatman
CpSc 360, Project 3


DESCRIPTION:
This project essentialy was to build a small working webserver, that could serve up http requests. The requests fully supported are GET and HEAD. If a user requests a file within the "website" directory, then the server will send an http response back with the requested information.


COMMENTS:
I sometimes find that I get random segfaults, but this only happens occasionally. An identical set of tasks could cause the program to segfault, yet I have only rarely encountered this problem. 
The code only works if the requested directory is in a subdirectory "./website" or a single directory up "../website" I believe this follows the specification, but I wasn't entirely sure.


KNOWN PROBLEMS:
The only known problem that exists, as mentioned in the comments, is due to a random segfault after a request is sent. This isn't a common problem, but may occur.


DESIGN:
I set this program up to, first and foremost, receive a connection from a tcp socket through an http request. The connection will wait until a request has been received, it will then parse the request and write back a response. The write back buffer is a char array that has all of the header and content data strcat'ed to it. The exception to this is if a file is not a text based file (.txt .html .htm .php .js), then the program reads the data and interprets everything as binary data. It will stat the file, if it exists, and  retrieve the size, malloc the proper space and then memcpy the file into the content buffer. After the requested response has been sent the server will close the connection and free up all of the dynamically allocated memory (hopefully). The supported status codes are as follows: 200 OK, 400 BAD REQUEST, 403 FORBIDDEN, 404 NOT FOUND, and 405 METHOD NOT ALLOWED. If a request other than GET or HEAD comes in, the server will issue a 405 and include an Allow: after it.
There are no error pages reporting!!!!!! If you get a 404 the server will not display anything, if requested from a browser. 
